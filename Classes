class LogicGate:

    def __init__(self,n):
        self.name = n
        self.output = None

    def getLabel(self):
        return self.name

    def getOutput(self):
        self.output = self.performGateLogic()
        return self.output


class BinaryGate(LogicGate):

    def __init__(self,n):
        super(BinaryGate, self).__init__(n)

        self.pinA = None
        self.pinB = None

    def getPinA(self):
        if self.pinA == None:
            return int(input("Enter Pin A input for gate "+self.getLabel()+"-->"))
        else:
            return self.pinA.getFrom().getOutput()

    def getPinB(self):
        if self.pinB == None:
            return int(input("Enter Pin B input for gate "+self.getLabel()+"-->"))
        else:
            return self.pinB.getFrom().getOutput()

    def setNextPin(self,source):
        if self.pinA == None:
            self.pinA = source
        else:
            if self.pinB == None:
                self.pinB = source
            else:
                print("Cannot Connect: NO EMPTY PINS on this gate")


class AndGate(BinaryGate):

    def __init__(self,n):
        BinaryGate.__init__(self,n)

    def performGateLogic(self):

        a = self.getPinA()
        b = self.getPinB()
        if a==1 and b==1:
            return 1
        else:
            return 0

class OrGate(BinaryGate):

    def __init__(self,n):
        BinaryGate.__init__(self,n)

    def performGateLogic(self):

        a = self.getPinA()
        b = self.getPinB()
        if a ==1 or b==1:
            return 1
        else:
            return 0

class NOrGate(BinaryGate):

    def __init__(self,n):
        BinaryGate.__init__(self,n)

    def performGateLogic(self):

        a = self.getPinA()
        b = self.getPinB()
        if a ==0 or b==0:
            return 1
        else:
            return 0

class NandGate(BinaryGate):

    def __init__(self, n):
        BinaryGate.__init__(self,n)
    
    def performGateLogic(self):

        a = self.getPinA()
        b = self.getPinB()
        if a == 0 and b == 0:
            return 1
        else: 
            return 0
    
        
class XorGate(BinaryGate):

    def __init__(self, n):
        BinaryGate.__init__(self,n)

    def performGateLogic(self):

        a = self.getPinA()
        b = self.getPinB()
        if a == b:
            return 0
        else:
            return 1
        
class XNorGate(BinaryGate):

    def __init__(self, n):
        BinaryGate.__init__(self,n)

    def performGateLogic(self):

        a = self.getPinA()
        b = self.getPinB()
        if a == b:
            return 1
        else:
            return 0
        
class JKFlipFlop(BinaryGate):
    def __init__(self, n):
        BinaryGate.__init__(self,n)
        self.q = 0

    def performGateLogic(self):
        if self.known:
            return self.qn 
       
        self.known = True
        out = 0
        if self.qn == 0:
            pinJ = self.getPinA()
            if pinJ == 0 and self.qn == 0:
               out = 0
            elif pinJ == 1 or self.qn == 1:
               out = 1
        elif self.qn == 1:
            pinK = self.getPinB()
            if pinK == 1 and self.qn == 1:
                out = 0
            elif pinK == 1 or self.qn == 1:
                out = 1
        self.qn = out
        return self.qn 

               


class UnaryGate(LogicGate):

    def __init__(self,n):
        LogicGate.__init__(self,n)

        self.pin = None

    def getPin(self):
        if self.pin == None:
            return int(input("Enter Pin input for gate "+self.getLabel()+"-->"))
        else:
            return self.pin.getFrom().getOutput()

    def setNextPin(self,source):
        if self.pin == None:
            self.pin = source
        else:
            print("Cannot Connect: NO EMPTY PINS on this gate")


class NotGate(UnaryGate):

    def __init__(self,n):
        UnaryGate.__init__(self,n)

    def performGateLogic(self):
        if self.getPin():
            return 0
        else:
            return 1

class Power(UnaryGate):
    def __init__(self,n):
        UnaryGate.__init__(self,n)
    
    def performGateLogic(self):
        return 1

class Switch(UnaryGate):
    def __init__(self, n):
        UnaryGate.__init__(self,n)
    def performGateLogic(self):
        if self.q == 0 or self.q == 1:
            return 1


class Connector:

    def __init__(self, fgate, tgate):
        self.fromgate = fgate
        self.togate = tgate

        tgate.setNextPin(self)

    def getFrom(self):
        return self.fromgate

    def getTo(self):
        return self.togate
    

def main():
    while True:
        jk1 = JKFlipFlop("JK1")
        jk2 = JKFlipFlop("JK2")
        S = Switch("S")
        P = Power("P")
        A1 = AndGate("A1")
        A2 = AndGate("A2")
        A3 = AndGate("A3")
        N1 = NotGate("N1")
        N2 = NotGate("N2")
        c1 = Connector(S, A1)
        c2 = Connector(S, N1)
        c3 = Connector(S, A2)
        c4 = Connector(jk1, N2)
        c5 = Connector(jk2, A1)
        c6 = Connector(A1, jk1)
        c7 = Connector(N1, jk1)
        c8 = Connector(N2, A2)
        c9 = Connector(A2, jk2)
        c10 = Connector(P, jk2) 
        c11 = Connector(N2, A3)
        c12 = Connector(jk2, A3)
        print("Output: " + str(A3.getOutput()))
        jk1.known = False
        jk2.known = False   
main()